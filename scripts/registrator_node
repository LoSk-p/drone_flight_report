#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
from collections import namedtuple
from datetime import datetime

# ROS
import rospy
from std_msgs.msg import String

# AIRA
from robonomics_liability.msg import Liability
from robonomics_liability.srv import StartLiability, FinishLiability

from tempfile import gettempdir
import ipfshttpclient
import os

class Registrator:

    data_to_result = {}

    def __init__(self):
        rospy.init_node("registrator")
        rospy.loginfo("Launching registrator node...")

        rospy.Subscriber('/liability/ready', Liability, self.on_new_liability)

        rospy.wait_for_service('/liability/finish')

        self.liability_proxy = namedtuple('liability_srvs_proxy', ['start', 'finish'])(
                                          rospy.ServiceProxy('/liability/start', StartLiability),
                                          rospy.ServiceProxy('/liability/finish', FinishLiability))

        # For easy clean up after liability is executed
        self.publishers = []
        self.subscribers = []

        rospy.loginfo("Registrator node is launched!")

    def on_new_liability(self, liability):
        rospy.loginfo("Got new liability {}".format(liability.address))
        if liability.model.multihash != rospy.get_param('/offer_node/model'):
            rospy.loginfo("The liability is not for me")
            return

        rospy.loginfo('Starting process...')

        self.currenct_liability = liability.address.address

        prefix = '/liability/eth_' + self.currenct_liability
        sub = rospy.Subscriber(prefix + '/liability', String, self.liability_id)
        self.subscribers.append(sub)

        sub = rospy.Subscriber(prefix + '/log_hash', String, self.read_log)
        self.subscribers.append(sub)

        self.pub_status = rospy.Publisher(prefix + '/status', String, queue_size=128)
        self.publishers.append(self.pub_status)

        self.pub_timestamp = rospy.Publisher(prefix + '/timestamp', String, queue_size=128)
        self.publishers.append(self.pub_timestamp)

        self.liability_proxy.start(self.currenct_liability)

    def liability_id(self, liability):
        self.data_to_result["liability"] = liability.data
        if len(self.data_to_result) == 2:
            self.finish_liabilitiy()

    def read_log(self, log_hash):
        self.data_to_result["log_hash"] = log_hash.data
        if len(self.data_to_result) == 2:
            self.finish_liabilitiy()

    def ipfs_download_file(self, ipfs_hash):
        ipfs_client = ipfshttpclient.connect()
        try:
            tempdir = gettempdir()
            os.chdir(tempdir)
            ipfs_client.get(ipfs_hash, timeout=30)
        except Exception as e:
            rospy.logwarn("Failed to download %s with exception: %s", ipfs_hash, e)
            return False
        return True

    def finish_liabilitiy(self):
        rospy.loginfo("Finishing liability...")

        rospy.loginfo("Getting status")
        status = self.ipfs_download_file(self.data_to_result["log_hash"])
        self.pub_status.publish(String(str(status)))

        rospy.loginfo("Getting time stamp")
        timestamp = datetime.now().isoformat()
        self.pub_timestamp.publish(String(timestamp))

        rospy.loginfo("Waiting to publish the data")
        rospy.sleep(4)
        self.clean()

    def clean(self):
        rospy.loginfo("Cleaning up...")

        for subscriber in self.subscribers:
            subscriber.unregister()

        self.liability_proxy.finish(self.currenct_liability, True)

        for publisher in self.publishers:
            publisher.unregister()

        self.publishers = []
        self.subscribers = []
        self.data_to_result = {}

    def spin(self):
        rospy.spin()


if __name__ == "__main__":
    Registrator().spin()

